generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../.github/assets/ERD.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String         @id @default(uuid())
  username                String         @unique
  name                    String
  email                   String         @unique
  password                String?
  // cpf                     String?        @unique
  // address                 Address?       @relation(fields: [addressId], references: [id])
  status                  STATUS         @default(ACTIVE)
  block_reason            String?
  birth_date              String
  created_at              DateTime       @default(now())
  phone                   String?
  usertype                USERTYPE
  orders_amount           Int            @default(0)
  image                   String         @default("https://cdn-icons-png.flaticon.com/512/74/74472.png")
  completed_orders_amount Int            @default(0)
  service                 Service?       @relation(fields: [serviceId], references: [id])
  serviceId               String?
  rating                  Float          @default(0.0)
  ratings                 Float[]        @default([])
  last_online             DateTime?      @default(now())
  last_login              DateTime?
  banner                  String?        @default("https://uezcompanys3.s3.us-east-2.amazonaws.com/defaultbanner.jpg")
  bio                     String?        @default("Usuario criado na UezCompany, somente ele mesmo pode edita-lo.")
  addressId               String?
  owner_orders            Order[]        @relation("client")
  assigned_orders         Order[]        @relation("assigned_uzer")
  chats                   Chat[]         @relation("UserChats")
  notifications           Notification[]
}

model Service {
  id                      String      @id @default(uuid())
  name                    String      @unique
  type                    SERVICETYPE
  category                Category    @relation(fields: [categoryId], references: [id])
  description             String      @default("Servi√ßo oferecido pela UezCompany")
  completed_orders_amount Int?        @default(0)
  default_tax             Float       @default(5.0)
  orders                  Order[]
  users                   User[]
  categoryId              String
}

model Order {
  id          String      @id @default(uuid())
  service     Service     @relation(fields: [serviceId], references: [id])
  serviceId   String
  title       String
  description String      @default("Pedido criado na UezCompany, somente um Uzer pode finaliza-lo.")
  status      String      @default("A REALIZAR")
  available   Boolean     @default(true)
  created_at  DateTime    @default(now())
  end_date    DateTime?
  value       Float       @default(0.0)
  images      String[]
  rating      Float       @default(0.0)
  rated       Boolean     @default(false)
  Portfolio   Portfolio[]
  Messages    Message[]
  client      User        @relation("client", fields: [clientId], references: [id])
  clientId    String
  uzer        User?       @relation("assigned_uzer", fields: [uzerId], references: [id])
  uzerId      String?
}

model Portfolio {
  id      String @id @default(uuid())
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String
}

model Notification {
  id         String   @id @default(uuid())
  receiver   User     @relation(fields: [receiverId], references: [id], onDelete: Cascade)
  type       String
  content    String
  created_at DateTime @default(now())
  readed     Boolean  @default(false)
  receiverId String
}

model Chat {
  id         String    @id @default(uuid())
  users      User[]    @relation("UserChats")
  messages   Message[]
  created_at DateTime  @default(now())
}

model Message {
  id         String      @id @default(uuid())
  type       MESSAGETYPE @default(TEXT)
  content    String
  created_at DateTime    @default(now())
  readed     Boolean     @default(false)
  senderId   String
  receiverId String
  chat       Chat        @relation(fields: [chatId], references: [id])
  chatId     String
  order      Order?      @relation(fields: [orderId], references: [id])
  orderId    String?
}

// model Address {
//   id           String @id @default(uuid())
//   zip          String
//   street       String
//   neighborhood String
//   city         String
//   state        String
//   complement   String
//   number       Int
//   User         User[]
// }

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  services Service[]
}

enum SERVICETYPE {
  ONLINE
}

enum STATUS {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum USERTYPE {
  UZER
  CLIENT
  BOTH
}

enum MESSAGETYPE {
  TEXT
  BUDGET
  IMAGE
  FILE
}
